}
else if ( Rank == "best"){
Rank = 1
}
else{
Rank = Rank
}
# Taking state in to account, also Valid State check.
for (state in unique_states) {
#Creating data.frame for required state.
required_state <- subset(file_data, file_data$State == state)
#change of required classes from Character to Numeric and Omitting of NA and NAN values.
required_state[,colnum] <- as.numeric(required_state[,colnum])
required_state <- na.omit(required_state,cols=colnum)
#Selecting Required Fields from the Sorted list.
new_hospital_list <- required_state[,c(2,colnum,7)]
new_hospital_list <- new_hospital_list[order(new_hospital_list[,2], new_hospital_list[,1]),]
colnames(new_hospital_list)[2] <- c("rate")
#Adding Ranks for required field,with ties treated by first come rather than average.
new_hospital_list <- cbind(new_hospital_list,Rank = rank(new_hospital_list$rate, ties.method = "first"))
new_hospital_list <- new_hospital_list[order(new_hospital_list[,2], new_hospital_list[,1], new_hospital_list[,3]),]
# Returning the Hospital corresponding to the Input arguments (State,Outcome and Rank).
df_hospital_rank <- rbind(df_hospital_rank,new_hospital_list[Rank,])
}
df_hospital_rank <<- df_hospital_rank
return(new_hospital_list[Rank,])
}
rankall("heart attack",20)
rankall <- function(outcome,Rank){
df_hospital_rank <- data.frame()
#Importing the CSV file in to data.frame "file_data".
file_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
#Creating a vector containing Unique states.
unique_states <- unique(file_data$State)
if (outcome == "heart attack"){
colnum <- 11
}
else if(outcome == "heart failure"){
colnum <- 17
}
else if(outcome == "pneumonia"){
colnum <- 23
}
else{
#Throwing error and exiting for Invalid Outcome.
stop("invalid outcome")
}
# Check for Rank Input,to accept Best and Worst other than Numeric Input.
if (Rank == "worst"){
Rank = nrow(new_hospital_list)
}
else if ( Rank == "best"){
Rank = 1
}
else{
Rank = Rank
}
# Taking state in to account, also Valid State check.
for (state in unique_states) {
#Creating data.frame for required state.
required_state <- subset(file_data, file_data$State == state)
#change of required classes from Character to Numeric and Omitting of NA and NAN values.
required_state[,colnum] <- as.numeric(required_state[,colnum])
required_state <- na.omit(required_state,cols=colnum)
#Selecting Required Fields from the Sorted list.
new_hospital_list <- required_state[,c(2,colnum,7)]
new_hospital_list <- new_hospital_list[order(new_hospital_list[,2], new_hospital_list[,1]),]
colnames(new_hospital_list)[2] <- c("rate")
#Adding Ranks for required field,with ties treated by first come rather than average.
new_hospital_list <- cbind(new_hospital_list,Rank = rank(new_hospital_list$rate, ties.method = "first"))
# Returning the Hospital corresponding to the Input arguments (State,Outcome and Rank).
df_hospital_rank <- rbind(df_hospital_rank,new_hospital_list[Rank,])
}
df_hospital_rank <<- df_hospital_rank
df_hospital_rank <- df_hospital_rank[order(df_hospital_rank[,2], df_hospital_rank[,1], df_hospital_rank[,3]),]
return(df_hospital_rank)
}
rankall("heart attack",20)
rankall <- function(outcome,Rank){
df_hospital_rank <- data.frame()
#Importing the CSV file in to data.frame "file_data".
file_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
#Creating a vector containing Unique states.
unique_states <- unique(file_data$State)
if (outcome == "heart attack"){
colnum <- 11
}
else if(outcome == "heart failure"){
colnum <- 17
}
else if(outcome == "pneumonia"){
colnum <- 23
}
else{
#Throwing error and exiting for Invalid Outcome.
stop("invalid outcome")
}
# Check for Rank Input,to accept Best and Worst other than Numeric Input.
if (Rank == "worst"){
Rank = nrow(new_hospital_list)
}
else if ( Rank == "best"){
Rank = 1
}
else{
Rank = Rank
}
# Taking state in to account, also Valid State check.
for (state in unique_states) {
#Creating data.frame for required state.
required_state <- subset(file_data, file_data$State == state)
#change of required classes from Character to Numeric and Omitting of NA and NAN values.
required_state[,colnum] <- as.numeric(required_state[,colnum])
required_state <- na.omit(required_state,cols=colnum)
#Selecting Required Fields from the Sorted list.
new_hospital_list <- required_state[,c(2,colnum,7)]
new_hospital_list <- new_hospital_list[order(new_hospital_list[,2], new_hospital_list[,1]),]
colnames(new_hospital_list)[2] <- c("rate")
#Adding Ranks for required field,with ties treated by first come rather than average.
new_hospital_list <- cbind(new_hospital_list,Rank = rank(new_hospital_list$rate, ties.method = "first"))
# Returning the Hospital corresponding to the Input arguments (State,Outcome and Rank).
df_hospital_rank <- rbind(df_hospital_rank,new_hospital_list[Rank,])
}
df_hospital_rank <<- df_hospital_rank
df_hospital_rank <- df_hospital_rank[order(df_hospital_rank[,3], df_hospital_rank[,2], df_hospital_rank[,1]),]
return(df_hospital_rank)
}
rankall("heart attack",20)
warnings()
rankall <- function(outcome,Rank){
df_hospital_rank <- data.frame()
#Importing the CSV file in to data.frame "file_data".
file_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
#Creating a vector containing Unique states.
unique_states <- unique(file_data$State)
if (outcome == "heart attack"){
colnum <- 11
}
else if(outcome == "heart failure"){
colnum <- 17
}
else if(outcome == "pneumonia"){
colnum <- 23
}
else{
#Throwing error and exiting for Invalid Outcome.
stop("invalid outcome")
}
# Check for Rank Input,to accept Best and Worst other than Numeric Input.
if (Rank == "worst"){
Rank = nrow(new_hospital_list)
}
else if ( Rank == "best"){
Rank = 1
}
else{
Rank = Rank
}
# Taking state in to account, also Valid State check.
for (state in unique_states) {
#Creating data.frame for required state.
required_state <- subset(file_data, file_data$State == state)
#change of required classes from Character to Numeric and Omitting of NA and NAN values.
required_state[,colnum] <- as.numeric(required_state[,colnum])
required_state <- na.omit(required_state,cols=colnum)
#Selecting Required Fields from the Sorted list.
new_hospital_list <- required_state[,c(2,colnum,7)]
new_hospital_list <- new_hospital_list[order(new_hospital_list[,2], new_hospital_list[,1]),]
colnames(new_hospital_list)[2] <- c("rate")
#Adding Ranks for required field,with ties treated by first come rather than average.
new_hospital_list <- cbind(new_hospital_list,Rank = rank(new_hospital_list$rate, ties.method = "first"))
if (Rank <= length(new_hospital_list$Rank)){
# Returning the Hospital corresponding to the Input arguments (State,Outcome and Rank).
df_hospital_rank <- rbind(df_hospital_rank,new_hospital_list[Rank,])
}
else{
df_hospital_rank <- rbind(df_hospital_rank,c(NA,NA,NA,state))
}
}
df_hospital_rank <<- df_hospital_rank
df_hospital_rank <- df_hospital_rank[order(df_hospital_rank[,3], df_hospital_rank[,2], df_hospital_rank[,1]),]
return(df_hospital_rank)
}
warnings()
rankall("heart attack",20)
rankall <- function(outcome,Rank){
df_hospital_rank <- data.frame()
#Importing the CSV file in to data.frame "file_data".
file_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
#Creating a vector containing Unique states.
unique_states <- unique(file_data$State)
if (outcome == "heart attack"){
colnum <- 11
}
else if(outcome == "heart failure"){
colnum <- 17
}
else if(outcome == "pneumonia"){
colnum <- 23
}
else{
#Throwing error and exiting for Invalid Outcome.
stop("invalid outcome")
}
# Check for Rank Input,to accept Best and Worst other than Numeric Input.
if (Rank == "worst"){
Rank = nrow(new_hospital_list)
}
else if ( Rank == "best"){
Rank = 1
}
else{
Rank = Rank
}
# Taking state in to account, also Valid State check.
for (state in unique_states) {
#Creating data.frame for required state.
required_state <- subset(file_data, file_data$State == state)
#change of required classes from Character to Numeric and Omitting of NA and NAN values.
required_state[,colnum] <- as.numeric(required_state[,colnum])
required_state <- na.omit(required_state,cols=colnum)
#Selecting Required Fields from the Sorted list.
new_hospital_list <- required_state[,c(2,colnum,7)]
new_hospital_list <- new_hospital_list[order(new_hospital_list[,2], new_hospital_list[,1]),]
colnames(new_hospital_list)[2] <- c("rate")
#Adding Ranks for required field,with ties treated by first come rather than average.
new_hospital_list <- cbind(new_hospital_list,Rank = rank(new_hospital_list$rate, ties.method = "first"))
if (Rank <= length(new_hospital_list$Rank)){
# Returning the Hospital corresponding to the Input arguments (State,Outcome and Rank).
df_hospital_rank <- rbind(df_hospital_rank,new_hospital_list[Rank,])
}
else{
df_hospital_rank <- rbind(df_hospital_rank,c(NA,NA,state,Rank))
}
}
df_hospital_rank <<- df_hospital_rank
df_hospital_rank <- df_hospital_rank[order(df_hospital_rank[,3], df_hospital_rank[,2], df_hospital_rank[,1]),]
return(df_hospital_rank)
}
rankall("heart attack",20)
best("SC", "heart attack")
#best function to suggest best hospital in a state for a particular treatment.
best <- function(state, outcome){
#Importing the CSV file in to data.frame "file_data".
file_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
#Creating a vector containing Unique states.
unique_states <- unique(file_data$State)
# Taking state in to account, also Valid State check.
if (state %in% unique_states) {
#Creating data.frame for required state.
required_state <- subset(file_data, file_data$State == state)
if (outcome == "heart attack"){
colnum <- 11
}
else if(outcome == "heart failure")
{
colnum <- 17
}
else if(outcome == "pneumonia")
{
colnum <- 23
}
else{
#Throwing error and exiting for Invalid Outcome.
stop("invalid outcome")
}
#change of required classes from Character to Numeric and Omitting of NA and NAN values.
required_state[,colnum] <- as.numeric(required_state[,colnum])
required_state <- na.omit(required_state,cols=colnum)
#Selection of best Hospital from the Sorted list
best_hosptial <- subset(required_state, required_state[,colnum] == min(required_state[,colnum] ))
return(best_hosptial[,2])
}
else{
#Throwing error and exiting for Invalid State selection.
stop("invalid state")
}
}
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
rankall("heart attack", 4)
r <- rankall("heart attack", 4)
as.character(subset(r, State == "HI")$hospital)
r <- rankall("pneumonia", "worst")
as.character(subset(r, State == "NJ")$hospital)
rankall("pneumonia", "worst")
rankall <- function(outcome,Rank){
df_hospital_rank <- data.frame()
#Importing the CSV file in to data.frame "file_data".
file_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
#Creating a vector containing Unique states.
unique_states <- unique(file_data$State)
if (outcome == "heart attack"){
colnum <- 11
}
else if(outcome == "heart failure"){
colnum <- 17
}
else if(outcome == "pneumonia"){
colnum <- 23
}
else{
#Throwing error and exiting for Invalid Outcome.
stop("invalid outcome")
}
# Taking state in to account, also Valid State check.
for (state in unique_states) {
#Creating data.frame for required state.
required_state <- subset(file_data, file_data$State == state)
#change of required classes from Character to Numeric and Omitting of NA and NAN values.
required_state[,colnum] <- as.numeric(required_state[,colnum])
required_state <- na.omit(required_state,cols=colnum)
# Check for Rank Input,to accept Best and Worst other than Numeric Input.
if (Rank == "worst"){
Rank = nrow(new_hospital_list)
}
else if ( Rank == "best"){
Rank = 1
}
else{
Rank = Rank
}
#Selecting Required Fields from the Sorted list.
new_hospital_list <- required_state[,c(2,colnum,7)]
new_hospital_list <- new_hospital_list[order(new_hospital_list[,2], new_hospital_list[,1]),]
colnames(new_hospital_list)[2] <- c("rate")
#Adding Ranks for required field,with ties treated by first come rather than average.
new_hospital_list <- cbind(new_hospital_list,Rank = rank(new_hospital_list$rate, ties.method = "first"))
if (Rank <= length(new_hospital_list$Rank)){
# Returning the Hospital corresponding to the Input arguments (State,Outcome and Rank).
df_hospital_rank <- rbind(df_hospital_rank,new_hospital_list[Rank,])
}
else{
df_hospital_rank <- rbind(df_hospital_rank,c(NA,NA,state,Rank))
}
}
df_hospital_rank <<- df_hospital_rank
df_hospital_rank <- df_hospital_rank[order(df_hospital_rank[,3], df_hospital_rank[,2], df_hospital_rank[,1]),]
return(df_hospital_rank)
}
rankall("pneumonia", "worst")
rankall <- function(outcome,Rank){
df_hospital_rank <- data.frame()
#Importing the CSV file in to data.frame "file_data".
file_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
#Creating a vector containing Unique states.
unique_states <- unique(file_data$State)
if (outcome == "heart attack"){
colnum <- 11
}
else if(outcome == "heart failure"){
colnum <- 17
}
else if(outcome == "pneumonia"){
colnum <- 23
}
else{
#Throwing error and exiting for Invalid Outcome.
stop("invalid outcome")
}
# Taking state in to account, also Valid State check.
for (state in unique_states) {
#Creating data.frame for required state.
required_state <- subset(file_data, file_data$State == state)
#change of required classes from Character to Numeric and Omitting of NA and NAN values.
required_state[,colnum] <- as.numeric(required_state[,colnum])
required_state <- na.omit(required_state,cols=colnum)
#Selecting Required Fields from the Sorted list.
new_hospital_list <- required_state[,c(2,colnum,7)]
new_hospital_list <- new_hospital_list[order(new_hospital_list[,2], new_hospital_list[,1]),]
colnames(new_hospital_list)[2] <- c("rate")
# Check for Rank Input,to accept Best and Worst other than Numeric Input.
if (Rank == "worst"){
Rank = nrow(new_hospital_list)
}
else if ( Rank == "best"){
Rank = 1
}
else{
Rank = Rank
}
#Adding Ranks for required field,with ties treated by first come rather than average.
new_hospital_list <- cbind(new_hospital_list,Rank = rank(new_hospital_list$rate, ties.method = "first"))
if (Rank <= length(new_hospital_list$Rank)){
# Returning the Hospital corresponding to the Input arguments (State,Outcome and Rank).
df_hospital_rank <- rbind(df_hospital_rank,new_hospital_list[Rank,])
}
else{
df_hospital_rank <- rbind(df_hospital_rank,c(NA,NA,state,Rank))
}
}
df_hospital_rank <<- df_hospital_rank
df_hospital_rank <- df_hospital_rank[order(df_hospital_rank[,3], df_hospital_rank[,2], df_hospital_rank[,1]),]
return(df_hospital_rank)
}
rankall("pneumonia", "worst")
rankall("heart failure", 10)
rankall <- function(outcome,Rank){
df_hospital_rank <- data.frame()
#Importing the CSV file in to data.frame "file_data".
file_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
#Creating a vector containing Unique states.
unique_states <- unique(file_data$State)
if (outcome == "heart attack"){
colnum <- 11
}
else if(outcome == "heart failure"){
colnum <- 17
}
else if(outcome == "pneumonia"){
colnum <- 23
}
else{
#Throwing error and exiting for Invalid Outcome.
stop("invalid outcome")
}
# Taking state in to account, also Valid State check.
for (state in unique_states) {
#Creating data.frame for required state.
required_state <- subset(file_data, file_data$State == state)
#change of required classes from Character to Numeric and Omitting of NA and NAN values.
required_state[,colnum] <- as.numeric(required_state[,colnum])
required_state <- na.omit(required_state,cols=colnum)
#Selecting Required Fields from the Sorted list.
new_hospital_list <- required_state[,c(2,colnum,7)]
new_hospital_list <- new_hospital_list[order(new_hospital_list[,2], new_hospital_list[,1]),]
colnames(new_hospital_list)[2] <- c("rate")
# Check for Rank Input,to accept Best and Worst other than Numeric Input.
if (Rank == "worst"){
Rank = nrow(new_hospital_list)
}
else if ( Rank == "best"){
Rank = 1
}
else{
}
#Adding Ranks for required field,with ties treated by first come rather than average.
new_hospital_list <- cbind(new_hospital_list,Rank = rank(new_hospital_list$rate, ties.method = "first"))
if (Rank <= length(new_hospital_list$Rank)){
# Returning the Hospital corresponding to the Input arguments (State,Outcome and Rank).
df_hospital_rank <- rbind(df_hospital_rank,new_hospital_list[Rank,])
}
else{
df_hospital_rank <- rbind(df_hospital_rank,c(NA,NA,state,Rank))
}
}
df_hospital_rank <<- df_hospital_rank
df_hospital_rank <- df_hospital_rank[order(df_hospital_rank[,3], df_hospital_rank[,2], df_hospital_rank[,1]),]
return(df_hospital_rank)
}
rankall("pneumonia", "worst")
rankall <- function(outcome,Rank){
df_hospital_rank <- data.frame()
#Importing the CSV file in to data.frame "file_data".
file_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
#Creating a vector containing Unique states.
unique_states <- unique(file_data$State)
if (outcome == "heart attack"){
colnum <- 11
}
else if(outcome == "heart failure"){
colnum <- 17
}
else if(outcome == "pneumonia"){
colnum <- 23
}
else{
#Throwing error and exiting for Invalid Outcome.
stop("invalid outcome")
}
# Check for Rank Input,to accept Best and Worst other than Numeric Input.
if (Rank == "worst"){
Rank = nrow(new_hospital_list)
}
else if ( Rank == "best"){
Rank = 1
}
else{
}
# Taking state in to account, also Valid State check.
for (state in unique_states) {
#Creating data.frame for required state.
required_state <- subset(file_data, file_data$State == state)
#change of required classes from Character to Numeric and Omitting of NA and NAN values.
required_state[,colnum] <- as.numeric(required_state[,colnum])
required_state <- na.omit(required_state,cols=colnum)
#Selecting Required Fields from the Sorted list.
new_hospital_list <- required_state[,c(2,colnum,7)]
new_hospital_list <- new_hospital_list[order(new_hospital_list[,2], new_hospital_list[,1]),]
colnames(new_hospital_list)[2] <- c("rate")
#Adding Ranks for required field,with ties treated by first come rather than average.
new_hospital_list <- cbind(new_hospital_list,Rank = rank(new_hospital_list$rate, ties.method = "first"))
if (Rank <= length(new_hospital_list$Rank)){
# Returning the Hospital corresponding to the Input arguments (State,Outcome and Rank).
df_hospital_rank <- rbind(df_hospital_rank,new_hospital_list[Rank,])
}
else{
df_hospital_rank <- rbind(df_hospital_rank,c(NA,NA,state,Rank))
}
}
df_hospital_rank <<- df_hospital_rank
df_hospital_rank <- df_hospital_rank[order(df_hospital_rank[,3], df_hospital_rank[,2], df_hospital_rank[,1]),]
return(df_hospital_rank)
}
rankall("pneumonia", "worst")
